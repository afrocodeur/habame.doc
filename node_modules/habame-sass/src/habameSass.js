import * as sass from 'sass';
import Fs from 'node:fs';
import Path from 'node:path';


let $includeCode = '';
let $isIncludeFilesLoaded = false;
let $watchedFiles = {};


const watchFile = function(file, options, App) {
    if($watchedFiles[file]) {
        return;
    }
    $watchedFiles[file] = true;

    Fs.watchFile(file, { interval: 500 }, function() {
        loadIncludes(options, App);
        App.Logger.info([
            `${file} change`,
            'all style file will be update'
        ])
        App.reloadStyles();
    });
};

const loadIncludes = function(options, App) {
    $includeCode = '';
    if(options.includes) {
        if(!Array.isArray(options.includes)) {
            App.Logger.error('includes must be an array');
            return;
        }
        for(const file of options.includes) {
            const filePath = Path.resolve(file);
            if(!Fs.existsSync(filePath)) {
                App.Logger.error(`${filePath} file does not exists`);
                return;
            }
            watchFile(filePath, options, App);
            $includeCode += Fs.readFileSync(filePath, 'utf-8');
        }
    }
};

export function habameSass(input, options, App) {
    if(!$isIncludeFilesLoaded) {
        loadIncludes(options, App);
        $isIncludeFilesLoaded = true;
    }
    const output = sass.compileString($includeCode + input);
    return output.css;
}